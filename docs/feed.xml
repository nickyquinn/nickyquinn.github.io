<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="https://www.nickquinn.co.uk/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick Quinn - weblog</title>
    <link>https://www.nickquinn.co.uk/</link>
    <atom:link href="https://www.nickquinn.co.uk/feed.xml" rel="self" type="application/rss+xml" />
    <description>Random thoughts and bits I find interesting</description>
    <language>en-GB</language>
    <item>
      <title>Enforcing HTTPS on GitHub pages with Cloudflare</title>
      <link>https://www.nickquinn.co.uk/posts/github-pages-with-cloudflare/</link>
      <description>&lt;h1&gt;Enforcing HTTPS on GitHub pages with Cloudflare&lt;/h1&gt;
&lt;p&gt;When setting up GitHub pages, you have the option to enforce HTTPS when you&#39;re using a custom domain,
which is great, however, when you&#39;re using Cloudflare as your DNS provider you might find the option to enable
HTTPS greyed out, and GitHub presents you with this error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unavailable for your site because your domain is not properly configured to support HTTPS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is usually because Cloudflare proxy is enabled (orange cloud icon), and GitHub
sees that there&#39;s already a certificate in place, so it can&#39;t issue one itself.&lt;/p&gt;
&lt;p&gt;The solution is to disable the proxy for the domain or subdomain in Cloudflare:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/posts/github-pages-with-cloudflare/cf-proxy-off.png&quot; alt=&quot;Cloudflare proxy settings in the off state&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once this is done, return to the GitHub pages settings, and remove and then re-add the custom domain. You should now be able to enable HTTPS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/posts/github-pages-with-cloudflare/enforce-https.png&quot; alt=&quot;GitHub pages HTTPS settings enabled&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once this is done, you can re-enable the proxy in Cloudflare, but beware that when the certificate GitHub issues needs automatic renewal in three months, the Cloudflare proxy status will once more cause issues. You are best to &#39;grey-cloud&#39; your CNAME records pointing to GitHub to prevent this.&lt;/p&gt;
</description>
      <pubDate>Sun, 06 Aug 2023 22:33:53 +0000</pubDate>
      <dc:creator>Nick Quinn</dc:creator>
      <guid>https://www.nickquinn.co.uk/posts/github-pages-with-cloudflare/</guid>
    </item>
    <item>
      <title>Including same-solution project dependencies in NuGet packages</title>
      <link>https://www.nickquinn.co.uk/posts/including-project-dependencies-in-nuget-packages/</link>
      <description>&lt;h1&gt;Including same-solution project dependencies in NuGet packages&lt;/h1&gt;
&lt;p&gt;A regular pattern in .NET is to break software down into multiple projects within a Visual Studio solution; this helps developers visually identify separation of concerns, but it also allows parts of the code base to be different project types or languages. Another common reason may be that a solution produces more than one resulting piece of software, such as a web frontend, and an API for that frontend; in this scenario, you may have &lt;em&gt;three or more&lt;/em&gt; projects: the web project, the API project, and one or more library project containing code that&#39;s shared between the first two - these additional library projects may include things such as DTOs or &amp;quot;data transfer objects&amp;quot; - objects whose only purpose is to carry data between processes. When each project is built, each gets a copy of any shared library DLLs.&lt;/p&gt;
&lt;p&gt;But what if one of your published outputs is a NuGet package? Things work differently here: NuGet packages do not automatically get bundled with their shared library projects, and viewing the nupkg file will reveal that it has a dependency on these projects, and that you&#39;re expected to provide them, potentially as separate NuGet packages. This is fine if you want this behaviour, but what if you don&#39;t?&lt;/p&gt;
&lt;p&gt;In the below screenshot I&#39;ve set up a three-project solution: the first is the NuGet package project, the middle is a shared project the NuGet package project will have a dependency on, and the SampleNugetConsumer is what I&#39;ll attempt to install the resulting NuGet package from the first project into:&lt;/p&gt;
&lt;picture&gt;
      &lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/kGah140kO5-400.webp 400w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-800.webp 800w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-1280.webp 1280w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-1860.webp 1860w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/kGah140kO5-400.jpeg 400w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-800.jpeg 800w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-1280.jpeg 1280w, https://www.nickquinn.co.uk/assets/images/kGah140kO5-1860.jpeg 1860w&quot; sizes=&quot;100vw&quot; /&gt;
      &lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/kGah140kO5-1860.webp&quot; width=&quot;1860&quot; height=&quot;604&quot; alt=&quot;Set up of the example NuGet project&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; /&gt;
    &lt;/picture&gt;
&lt;p&gt;If I build this project, and look at the information for the NuGet package in the NuGet package manager, it tells me that this package has a dependency on SampleNuget.Shared:&lt;/p&gt;
&lt;picture&gt;
      &lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/pWpTgYaMvx-400.webp 400w, https://www.nickquinn.co.uk/assets/images/pWpTgYaMvx-666.webp 666w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/pWpTgYaMvx-400.jpeg 400w, https://www.nickquinn.co.uk/assets/images/pWpTgYaMvx-666.jpeg 666w&quot; sizes=&quot;100vw&quot; /&gt;
      &lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/pWpTgYaMvx-666.webp&quot; width=&quot;666&quot; height=&quot;350&quot; alt=&quot;NuGet package manager showing the package with NuGet dependencies&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; /&gt;
    &lt;/picture&gt;
&lt;p&gt;Trying to install this NuGet package results in an error, because the dependent package is not available:&lt;/p&gt;
&lt;picture&gt;
      &lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-400.webp 400w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-800.webp 800w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-1280.webp 1280w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-1376.webp 1376w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-400.jpeg 400w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-800.jpeg 800w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-1280.jpeg 1280w, https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-1376.jpeg 1376w&quot; sizes=&quot;100vw&quot; /&gt;
      &lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/q7zhjTykZa-1376.webp&quot; width=&quot;1376&quot; height=&quot;146&quot; alt=&quot;Missing dependency error&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; /&gt;
    &lt;/picture&gt;
&lt;p&gt;By making the following additions (in red) to the NuGet package&#39;s csproj file, the shared project will be built and the resulting DLL will be made part of the NuGet package, instead of an external dependency:&lt;/p&gt;
&lt;picture&gt;
      &lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-400.webp 400w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-800.webp 800w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-1280.webp 1280w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-1556.webp 1556w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-400.jpeg 400w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-800.jpeg 800w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-1280.jpeg 1280w, https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-1556.jpeg 1556w&quot; sizes=&quot;100vw&quot; /&gt;
      &lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/3-SxZvctrF-1556.webp&quot; width=&quot;1556&quot; height=&quot;630&quot; alt=&quot;Missing dependency error&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; /&gt;
    &lt;/picture&gt;
&lt;p&gt;Now when I try to install the NuGet package, the external dependency is gone, and I can install the package, which now includes the shared project code:&lt;/p&gt;
&lt;picture&gt;
      &lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-400.webp 400w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-800.webp 800w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-1280.webp 1280w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-1324.webp 1324w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-400.jpeg 400w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-800.jpeg 800w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-1280.jpeg 1280w, https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-1324.jpeg 1324w&quot; sizes=&quot;100vw&quot; /&gt;
      &lt;img src=&quot;https://www.nickquinn.co.uk/assets/images/05qwhXDQ8N-1324.webp&quot; width=&quot;1324&quot; height=&quot;320&quot; alt=&quot;Installable NuGet package with no external dependencies&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; /&gt;
    &lt;/picture&gt;
</description>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <dc:creator>Nick Quinn</dc:creator>
      <guid>https://www.nickquinn.co.uk/posts/including-project-dependencies-in-nuget-packages/</guid>
    </item>
  </channel>
</rss>